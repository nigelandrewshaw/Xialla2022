<script>

  const csvFile = "https://uploads-ssl.webflow.com/619d45a1fe87b88d8a78da91/624cd39cae04911f1075b08f_hubspot-crm-exports-hcp-show-on-website-2022-04-05.csv";
  const countriesSel = $("#countriesSel")[0];
  const statesSel = $("#statesSel")[0];



  $(document).ready(function() {
    importHcps();

    countriesSel.addEventListener("change", function() {
      loadStates();
      filterCountry();
    });

    statesSel.addEventListener("change", function() {
      filterState();
    });

  });

  function importHcps() {
    $.ajax({
      type: "GET",
      url: csvFile,
      dataType: "text",
      success: function(data) {
        hcps = csvJson(data);
        writeHcps(hcps);
      }
    });
  }

  function writeHcps(hcps) {
    var hcpList = $("#hcp-list");
    hcpList[0].innerHTML = "";
    for (var i = 0; i < hcps.length; i++) {
      var data = hcps[i];
      if (data['Company Name'] != null) {
        hcpList[0].innerHTML += fillHcpTemplate(data);
      }
    }
  }

  function csvJson(csv) {
    var lines = csvToArray(csv);

// var lines=csv.split("\n");
    var result = [];
    var headers = lines[0];
    for (var i = 1; i < lines.length; i++) {
      var obj = {};
      var currentline = lines[i];
      for (var j = 0; j < headers.length; j++) {
        obj[headers[j]] = currentline[j];
      }
      result.push(obj);
    }
    return result;
  }

  function fillHcpTemplate(data) {
    var firstName = data['First Name'];
    var lastName = data['Last Name'];
    var name = firstName + " " + lastName;
    var companyName = data['Company Name'];
    var companyNameId = companyName
      .toLowerCase()
      .replaceAll(" ", "-")
      .replaceAll(",", "")
      .replaceAll(".", "")
      .replaceAll("&", "")
      .replaceAll("'", "")
      .replaceAll("--", "-");
    var phoneNumber = data['Phone Number'];
    var website = data['Website URL'];
    var address = data['Street Address'];
    var city = data['City'];
    var state = data['State/Region'];
    var postal = data['Postal Code'];
    var country = data['Country/Region'];
    var practiceOverviewRaw = data['HCP - Practice Overview'];
    var practiceOverview = "";

// Surround practice overview paragraphs with <p>
    if (practiceOverviewRaw != null) {
      var a = practiceOverviewRaw.split("\n");
      for (var i = 0; i < a.length; i++) {
        practiceOverview += "<p>" + a[i] + "</p>";
      }
    }

    var template = `<div class="review-main-block">
                <div class="review-content-block">
                    <div class="review-stars-wrapper">
                        <img loading="lazy" src="stars.png" alt="Gold stars" class="review-stars">
                        <img loading="lazy" src="check.svg" alt="Check" class="verified-check">
                        <div class="verified-label">Verified</div>
                    </div>
                    <div class="tp-date">` + reviewDate + `<br></div>
                    <p class="review-title regular">` + reviewTitle + `<br></p>
                </div>
                <div class="review-content-block">
                    <p class="review-text">` + reviewDetails + `<br></p>
                    <p class="review-user-title">` + reviewName + `</p>
                </div>
            </div>`;
    return template;
  }

/**
     * CSVToArray parses any String of Data including '\r' '\n' characters,
     * and returns an array with the rows of data.
     * @param {String} CSV_string - the CSV string you need to parse
     * @param {String} delimiter - the delimeter used to separate fields of data
     * @returns {Array} rows - rows of CSV where first row are column headers
     */
  function csvToArray(CSV_string, delimiter) {
    delimiter = (delimiter || ","); // user-supplied delimeter or default comma

    var pattern = new RegExp( // regular expression to parse the CSV values.
        ( // Delimiters:
        "(\\" + delimiter + "|\\r?\\n|\\r|^)" +

// Quoted fields.
      "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

// Standard fields.
      "([^\"\\" + delimiter + "\\r\\n]*))"), "gi");

    var rows = [[]];

// array to hold our data. First row is column headers.
// array to hold our individual pattern matching groups:
    var matches = false;

// false if we don't find any matches
// Loop until we no longer find a regular expression match
    while (matches = pattern.exec(CSV_string)) {
      var matched_delimiter = matches[1];

// Get the matched delimiter
// Check if the delimiter has a length (and is not the start of string)
// and if it matches field delimiter. If not, it is a row delimiter.
      if (matched_delimiter.length && matched_delimiter !== delimiter) { // Since this is a new row of data, add an empty row to the array.
        rows.push([]);
      }
      var matched_value;

// Once we have eliminated the delimiter, check to see
// what kind of value was captured (quoted or unquoted):
      if (matches[2]) { // found quoted value. unescape any double quotes.
        matched_value = matches[2].replace(new RegExp("\"\"", "g"), "\"");
      } else { // found a non-quoted value
        matched_value = matches[3];
      }

// Now that we have our value string, let's add
// it to the data array.
      rows[rows.length - 1].push(matched_value);
    }
    return rows; // Return the parsed data Array
  }function zapDropDown(dropdownList) {
    var i,
      L = dropdownList.options.length - 1;

// Leave top item "State/Province"
    for (i = L; i >= 1; i--) {
      dropdownList.remove(i);
    }
  }
</script> 